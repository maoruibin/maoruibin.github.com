I"B<h2 id="强引用">强引用</h2>
<p>StrongReference
强引用是最普遍的引用方式。JVM 执行垃圾回收时，只要是强引用，该引用占用的内存空间就不会释放。</p>

<h2 id="软引用">软引用</h2>
<p>SoftReference
如果一个对象为软引用，那么在 JVM 内存足够的情况下，GC 将不会回收它，一旦内存不足，垃圾回收器就会将它们的内存回收。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SoftReference</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SoftReference</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"123"</span><span class="o">));</span>
<span class="nc">String</span> <span class="n">num</span> <span class="o">=</span> <span class="n">sr</span><span class="o">.</span><span class="na">get</span><span class="o">();</span><span class="c1">// num 可能为空，使用时需要判空</span>
</code></pre></div></div>

<h2 id="弱引用">弱引用</h2>
<p>WeakReference
如果一个对象为弱引用，当垃圾回收线程在扫描内存区域时，发现了它，便会对它进行回收，不论当前内存是否足够。</p>
<blockquote>
  <p>由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>
</blockquote>

<p>软引用跟弱引用都都可以跟一个引用队列 ReferenceQueue 联合使用，如果它们为回收，JVM 将会把他们放入指定的引用队列中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">WeakReference</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">wr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">WeakReference</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"123"</span><span class="o">));</span>
<span class="nc">String</span> <span class="n">num</span> <span class="o">=</span> <span class="n">wr</span><span class="o">.</span><span class="na">get</span><span class="o">();</span><span class="c1">// num 可能为空</span>
</code></pre></div></div>

<h2 id="虚引用">虚引用</h2>
<p>PhantomReference
形同虚设，它无法决定对象的生命周期，如果一个对象持有虚引用，那么它跟没有持有引用一样，在任何时候都可能被垃圾回收。</p>

<p>虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 ReferenceQueue 联合使用。</p>

<h2 id="总结">总结</h2>
<p>android 开发的多数场景使用弱引用来解决内存泄漏问题，标记为软引用的对象可以在内存不足是被回收，而弱引用在执行 GC 时就会被回收，很及时，如果有内存泄漏风险的对象使用了软引用，那么它存活的周期还是比较长的，并不能很好的达到避免内存泄漏的目的的。</p>

<p>软引用适合用来实现内存敏感的高速缓存。比如 Bitmap 缓存，或者在浏览器中前进后退页面缓存。</p>

<p>软引用 VS 弱引用</p>

<ul>
  <li>软引用在内存不足时才会回收，而弱引用，只要 GC 开始扫描，它就会被回收。</li>
  <li>虚引用日常几乎没用到。</li>
</ul>

<p>具体以上四种区别如下表格所示：
通过表格来说明一下，如下：</p>

<table>
  <thead>
    <tr>
      <th>引用类型</th>
      <th>被垃圾回收时间</th>
      <th>用途</th>
      <th>生存时间</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>强引用</td>
      <td>从来不会</td>
      <td>对象的一般状态</td>
      <td>JVM停止运行时终止</td>
    </tr>
    <tr>
      <td>软引用</td>
      <td>当内存不足时</td>
      <td>对象缓存</td>
      <td>内存不足时终止</td>
    </tr>
    <tr>
      <td>弱引用</td>
      <td>正常垃圾回收时</td>
      <td>对象缓存</td>
      <td>垃圾回收后终止</td>
    </tr>
    <tr>
      <td>虚引用</td>
      <td>正常垃圾回收时</td>
      <td>跟踪对象的垃圾回收</td>
      <td>垃圾回收后终止</td>
    </tr>
  </tbody>
</table>

<h2 id="参考链接">参考链接</h2>

<ul>
  <li><a href="https://juejin.im/post/5b82c02df265da436152f5ad#heading-4">理解Java的强引用、软引用、弱引用和虚引用 - 掘金</a></li>
</ul>
:ET